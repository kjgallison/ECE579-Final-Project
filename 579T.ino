// Import TensorFlow stuff
#include "TensorFlowLite.h"
#include "tensorflow/lite/micro/kernels/micro_ops.h"
#include "tensorflow/lite/micro/tflite_bridge/micro_error_reporter.h"
#include "tensorflow/lite/micro/micro_interpreter.h"
#include "tensorflow/lite/micro/micro_mutable_op_resolver.h"
//#include "tensorflow/lite/version.h"

// Our model
#include "lstm_vF2_h.h"

// TFLite globals, used for compatibility with Arduino-style sketches
namespace {
  tflite::ErrorReporter* error_reporter = nullptr;
  const tflite::Model* model = nullptr;
  tflite::MicroInterpreter* interpreter = nullptr;
  TfLiteTensor* model_input = nullptr;
  TfLiteTensor* model_output = nullptr;

  // Create an area of memory to use for input, output, and other TensorFlow
  // arrays. You'll need to adjust this by combiling, running, and looking
  // for errors.
  constexpr int kTensorArenaSize = 35 * 1024;
  uint8_t tensor_arena[kTensorArenaSize];
} // namespace


float input_mat[120][5] = {-0.4530316889286041, 0.6325944662094116, -1.2668254375457764, 0.5556210875511169, -0.21407786011695862, -0.5660406351089478, 0.4580884873867035, -0.9056735038757324, 0.7837467789649963, -0.21407786011695862, -0.622545063495636, 0.40822961926460266, -0.4514824450016022, 0.5556210875511169, 0.07917679101228714, -0.679049551486969, 0.3334413468837738, 0.29783278703689575, 0.5556210875511169, -0.018574761226773262, -0.679049551486969, 0.2087942212820053, 0.6339741945266724, 1.6962496042251587, -0.018574761226773262, -0.679049551486969, 0.0592176578938961, 0.6339741945266724, 1.2399982213974, 0.07917679101228714, -0.622545063495636, -0.02803533524274826, 0.8155505657196045, 1.0118725299835205, 0.07917679101228714, -0.4530316889286041, -0.19007660448551178, 0.7775346040725708, 1.6962496042251587, 0.07917679101228714, -0.2835182845592499, -0.3147237300872803, 0.631973385810852, 1.4681239128112793, 0.1769283413887024, -0.22701384127140045, -0.41444143652915955, 0.8395606875419617, 0.32749536633491516, 0.1769283413887024, -0.17050936818122864, -0.5016944408416748, 0.6709897518157959, 0.7837467789649963, 0.1769283413887024, -0.17050936818122864, -0.6762004494667053, 0.6709897518157959, 1.2399982213974, 0.1769283413887024, -0.22701384127140045, -0.7634534239768982, 0.8395606875419617, 0.7837467789649963, 0.27467989921569824, -0.2835182845592499, -0.9130299687385559, 0.8045459389686584, 0.5556210875511169, 0.1769283413887024, -0.3965272307395935, -1.0002830028533936, 0.928598165512085, 0.09936964511871338, 0.1769283413887024, -0.3965272307395935, -1.1000007390975952, 0.7815362811088562, -0.1287560760974884, 0.1769283413887024, -0.3965272307395935, -1.1747889518737793, 0.928598165512085, -0.5850074887275696, 0.07917679101228714, -0.3400227725505829, -1.249577283859253, 0.7850377559661865, 0.09936964511871338, 0.1769283413887024, -0.17050936818122864, -1.3617596626281738, 0.2177991271018982, -0.1287560760974884, 0.27467989921569824, 0.05550847947597504, -1.5238009691238403, -0.5025038719177246, 1.0118725299835205, 0.07917679101228714, 0.05550847947597504, -1.5861245393753052, -0.9081745743751526, 1.2399982213974, 0.47018298506736755, 0.05550847947597504, -1.785559892654419, -0.9081745743751526, 1.0118725299835205, 0.47018298506736755, 0.16851741075515747, -1.8728128671646118, -1.2698266506195068, 1.0118725299835205, 0.47018298506736755, 0.2250218689441681, -1.8603482246398926, -1.2533197402954102, 1.0118725299835205, 0.567934513092041, 0.2250218689441681, -1.785559892654419, -1.3438578844070435, 1.2399982213974, 0.7634376287460327, 0.05550847947597504, -1.7107716798782349, -1.286333680152893, 1.0118725299835205, 0.8611891865730286, -0.11400490999221802, -1.6110539436340332, -1.037729024887085, 0.09936964511871338, 0.9589407444000244, -0.2835182845592499, -1.5362656116485596, -0.9651985168457031, 0.32749536633491516, 0.9589407444000244, -0.3965272307395935, -1.4988715648651123, -0.8811631798744202, 0.09936964511871338, 0.7634376287460327, -0.4530316889286041, -1.4614773988723755, -0.9797046184539795, 0.7837467789649963, 0.8611891865730286, -0.5095361471176147, -1.5113362073898315, -1.006716012954712, 0.7837467789649963, 0.8611891865730286, -0.5095361471176147, -1.4988715648651123, -1.1117602586746216, 1.0118725299835205, 0.7634376287460327, -0.5660406351089478, -1.4739420413970947, -1.0157197713851929, -0.3568817973136902, 1.1544438600540161, -0.622545063495636, -1.5238009691238403, -1.0047152042388916, -1.0412589311599731, 1.1544438600540161, -0.679049551486969, -1.5861245393753052, -0.8286411166191101, -1.2693846225738525, -1.973605751991272, -0.679049551486969, -1.5362656116485596, -0.9221804738044739, -1.9537618160247803, -2.071357250213623, -0.9050673842430115, -1.4864068031311035, 0.7485224008560181, -1.9537618160247803, -2.071357250213623, -1.0180763006210327, -1.4240832328796387, 1.2512339353561401, -1.9537618160247803, -2.071357250213623, -1.0180763006210327, -1.5113362073898315, 1.2512339353561401, -1.9537618160247803, -2.071357250213623, -1.0180763006210327, -1.4864068031311035, 1.2512339353561401, -1.2693846225738525, -0.9960902333259583, -1.0745807886123657, -1.4240832328796387, 1.45832097530365, -1.0412589311599731, -1.3870964050292969, -1.0745807886123657, -1.4988715648651123, 1.2867487668991089, -1.0412589311599731, -1.5825995206832886, -1.0745807886123657, -1.5487303733825684, 1.45832097530365, -1.0412589311599731, -1.3870964050292969, -1.0180763006210327, -1.6609127521514893, 1.2512339353561401, -0.8131332397460938, -1.2893449068069458, -1.0180763006210327, -1.6359833478927612, 1.45932137966156, -1.2693846225738525, -1.093841791152954, -1.0180763006210327, -1.735701084136963, 1.45932137966156, -1.2693846225738525, -1.3870964050292969, -0.9615718722343445, -1.785559892654419, 1.290250301361084, -1.9537618160247803, -2.071357250213623, -0.9615718722343445, -1.7730952501296997, 1.4988380670547485, -1.9537618160247803, -2.071357250213623, -0.9615718722343445, -1.723236322402954, 1.290250301361084, -1.2693846225738525, -1.1915934085845947, -0.9050673842430115, -1.6110539436340332, 1.2917509078979492, -1.9537618160247803, -2.071357250213623, -0.9050673842430115, -1.5113362073898315, 1.2917509078979492, -0.8131332397460938, -0.6050840616226196, -0.9050673842430115, -1.3617596626281738, 1.2917509078979492, -1.0412589311599731, -0.21407786011695862, -0.9050673842430115, -1.299436092376709, 1.2917509078979492, -0.3568817973136902, 0.1769283413887024, -0.8485628962516785, -1.1249301433563232, 1.2932515144348145, 0.32749536633491516, 0.27467989921569824, -0.8485628962516785, -0.9628888368606567, 1.1301829814910889, 0.5556210875511169, 0.6656860709190369, -0.8485628962516785, -0.9005652666091919, 0.4328896105289459, 1.9243754148483276, 0.7634376287460327, -0.9050673842430115, -0.7883828282356262, -0.13184796273708344, 1.6962496042251587, 0.7634376287460327, -0.9615718722343445, -0.6014121770858765, -0.13885091245174408, 0.09936964511871338, 0.7634376287460327, -0.9615718722343445, -0.5515533089637756, -0.28341174125671387, 0.7837467789649963, 0.7634376287460327, -0.9615718722343445, -0.4767650067806244, -0.5310158729553223, 0.7837467789649963, 0.6656860709190369, -1.0180763006210327, -0.2524001896381378, -0.42847275733947754, -1.2693846225738525, 0.47018298506736755, -1.0745807886123657, -0.10282361507415771, -0.29741761088371277, -1.0412589311599731, 0.3724314272403717, -1.2497446537017822, -0.02803533524274826, 0.2733224928379059, -0.5850074887275696, 0.47018298506736755, -1.3005986213684082, 0.15893536806106567, 0.23780754208564758, -0.1287560760974884, 0.27467989921569824, -1.0745807886123657, 0.3209766447544098, -0.1523565948009491, -0.3568817973136902, 0.3724314272403717, -0.9050673842430115, 0.3459060788154602, -0.41396665573120117, -0.1287560760974884, 0.47018298506736755, -0.7920584678649902, 0.40822961926460266, -0.7255977392196655, 0.32749536633491516, 0.7634376287460327, -0.7920584678649902, 0.40822961926460266, -0.624555230140686, 0.09936964511871338, 0.567934513092041, -0.7920584678649902, 0.42069435119628906, -0.624555230140686, 0.32749536633491516, 0.47018298506736755, -0.7920584678649902, 0.39576491713523865, -0.7255977392196655, -0.5850074887275696, 0.6656860709190369, -0.7920584678649902, 0.37083548307418823, -0.8446478247642517, -0.5850074887275696, 0.47018298506736755, -0.7920584678649902, 0.38330021500587463, -0.8446478247642517, -0.3568817973136902, 0.3724314272403717, -0.7920584678649902, 0.4580884873867035, -0.9381871819496155, -0.5850074887275696, 0.567934513092041, -0.9050673842430115, 0.5079473257064819, -0.5225123167037964, -0.1287560760974884, 0.27467989921569824, -0.9615718722343445, 0.520412027835846, -0.13885091245174408, -0.5850074887275696, 0.27467989921569824, -1.0745807886123657, 0.4954826235771179, 0.9245964884757996, -1.2693846225738525, 0.27467989921569824, -1.1367356777191162, 0.2960472106933594, 1.2847479581832886, -1.0412589311599731, -1.5825995206832886, -1.1875896453857422, 0.24618835747241974, 1.4563201665878296, -1.0412589311599731, -1.2893449068069458, -1.1367356777191162, 0.14647065103054047, 1.2847479581832886, -0.5850074887275696, -1.2893449068069458, -1.1367356777191162, 0.17140008509159088, 1.2847479581832886, -0.8131332397460938, -1.1915934085845947, -1.1367356777191162, 0.15893536806106567, 1.2847479581832886, -0.8131332397460938, -1.2893449068069458, -1.1367356777191162, 0.046752944588661194, 1.2847479581832886, -0.1287560760974884, -1.1915934085845947, -1.1367356777191162, -0.15268246829509735, 1.2847479581832886, 0.5556210875511169, -1.3870964050292969, -1.1367356777191162, -0.23993545770645142, 1.4963369369506836, 0.09936964511871338, -1.3870964050292969, -1.1875896453857422, -0.3396531641483307, 1.2832473516464233, -0.3568817973136902, -1.4848480224609375, -1.1875896453857422, -0.5266238451004028, 1.2832473516464233, 0.5556210875511169, -1.3870964050292969, -1.1875896453857422, -0.4643003046512604, 1.2832473516464233, 0.32749536633491516, -1.5825995206832886, -1.3005986213684082, -0.5016944408416748, 1.2987538576126099, 1.0118725299835205, -1.5825995206832886, -1.4079570770263672, -0.3521178960800171, 1.2762444019317627, 0.32749536633491516, -1.5825995206832886, -1.4701119661331177, -0.26486489176750183, 1.066156029701233, 0.32749536633491516, -1.6803511381149292, -1.5831209421157837, -0.27732959389686584, 1.0606536865234375, 0.7837467789649963, -1.6803511381149292, -1.5831209421157837, -0.11528833210468292, 1.0606536865234375, 0.5556210875511169, -1.7781026363372803, -1.5209660530090332, -0.16514718532562256, 1.0636550188064575, -0.1287560760974884, -1.5825995206832886, -1.5209660530090332, -0.14021775126457214, 1.0636550188064575, 0.09936964511871338, -1.6803511381149292, -1.5831209421157837, -0.04050004854798317, 1.2707420587539673, -0.3568817973136902, -1.7781026363372803, -1.5831209421157837, -0.04050004854798317, 1.2707420587539673, -0.1287560760974884, -1.5825995206832886, -1.5831209421157837, -0.015570621937513351, 1.2707420587539673, -0.3568817973136902, -1.5825995206832886, -1.5831209421157837, 0.021823517978191376, 1.2707420587539673, -0.5850074887275696, -1.3870964050292969, -1.5831209421157837, -0.02803533524274826, 1.2707420587539673, -0.8131332397460938, -1.4848480224609375, -1.5209660530090332, -0.015570621937513351, 1.2342267036437988, -1.0412589311599731, -1.5825995206832886, -1.5209660530090332, -0.11528833210468292, 1.2342267036437988, -1.0412589311599731, -0.7028356194496155, -1.4701119661331177, -0.3147237300872803, 1.2742435932159424, -0.8131332397460938, -1.3870964050292969, -1.4701119661331177, -0.3895120322704315, 1.2742435932159424, -1.9537618160247803, -2.071357250213623, -1.3571031093597412, -0.3147237300872803, 1.278245210647583, -1.0412589311599731, 1.1544438600540161, -1.1875896453857422, -0.3521178960800171, 1.097669243812561, -0.3568817973136902, -0.018574761226773262, -1.1875896453857422, -0.5016944408416748, 1.097669243812561, 0.32749536633491516, 0.27467989921569824, -1.1367356777191162, -0.5640180110931396, 1.2847479581832886, 0.5556210875511169, 0.47018298506736755, -1.0745807886123657, -0.5640180110931396, 1.2867487668991089, 0.5556210875511169, 0.47018298506736755, -1.0180763006210327, -0.5390886068344116, 1.2512339353561401, 0.5556210875511169, 0.6656860709190369, -1.0180763006210327, -0.4767650067806244, 0.7405190467834473, 1.2399982213974, 0.7634376287460327, -1.0180763006210327, -0.5016944408416748, 0.43439024686813354, 1.0118725299835205, 0.6656860709190369, -1.0180763006210327, -0.3895120322704315, 0.26631954312324524, 1.2399982213974, 0.6656860709190369, -1.0180763006210327, -0.202541321516037, 0.13376377522945404, 2.380626916885376, 0.8611891865730286, -1.0745807886123657, -0.02803533524274826, -0.028804617002606392, 1.4681239128112793, 0.7634376287460327, -1.1875896453857422, 0.13400593400001526, 0.11575619876384735, 2.152501106262207, 0.8611891865730286, -1.1875896453857422, 0.25865307450294495, -0.2984180450439453, 2.8368782997131348, 0.7634376287460327, -1.3005986213684082, 0.42069435119628906, -0.3124239444732666, 3.0650038719177246, 0.8611891865730286, -1.4079570770263672, 0.5079473257064819, -0.4804946482181549, 2.8368782997131348, 0.8611891865730286, -1.4079570770263672, 0.6575238704681396, -0.4804946482181549, 2.380626916885376, 0.7634376287460327, -1.3571031093597412, 0.8320298790931702, -0.8166360259056091, 1.0118725299835205, 0.9589407444000244};


void setup() {
  // Wait for Serial to connect

  while(!Serial);


  // Let's make an LED vary in brightness
  // pinMode(led_pin, OUTPUT);

  // Set up logging (will report to Serial, even within TFLite functions)
  static tflite::MicroErrorReporter micro_error_reporter;
  error_reporter = &micro_error_reporter;



  // Map the model into a usable data structure
  model = tflite::GetModel(lstm_vF2_h);
  if (model->version() != TFLITE_SCHEMA_VERSION) {
    error_reporter->Report("Model version does not match Schema");
    while(1);
  }


  static tflite::MicroMutableOpResolver<7> micro_mutable_op_resolver;
  micro_mutable_op_resolver.AddQuantize();
  micro_mutable_op_resolver.AddStridedSlice();
  micro_mutable_op_resolver.AddUnidirectionalSequenceLSTM();
  micro_mutable_op_resolver.AddFullyConnected();
  micro_mutable_op_resolver.AddRelu();
  micro_mutable_op_resolver.AddTanh();
  micro_mutable_op_resolver.AddDequantize();

  // Build an interpreter to run the model
  static tflite::MicroInterpreter static_interpreter(
    model, micro_mutable_op_resolver, tensor_arena, kTensorArenaSize);
  interpreter = &static_interpreter;

  // Allocate memory from the tensor_arena for the model's tensors
  TfLiteStatus allocate_status = interpreter->AllocateTensors();
  if (allocate_status != kTfLiteOk) {
    error_reporter->Report("AllocateTensors() failed");
    while(1);
  }

  // Assign model input and output buffers (tensors) to pointers
  model_input = interpreter->input(0);
  model_output = interpreter->output(0);

  // Get information about the memory area to use for the model's input
  // Supported data types:
  // https://github.com/tensorflow/tensorflow/blob/master/tensorflow/lite/c/common.h#L226

  Serial.print("Number of dimensions: ");
  Serial.println(model_output->dims->size);
  Serial.print("Dim 1 size: ");
  Serial.println(model_output->dims->data[0]);
  Serial.print("Dim 2 size: ");
  Serial.println(model_output->dims->data[1]);
  // Serial.print("Dim 3 size: ");
  // Serial.println(model_input->dims->data[2]);
  Serial.print("Input type: ");
  Serial.println(model_input->type);

}

void loop() {
  unsigned long start_timestamp = micros();

  // Copy value to input buffer (tensor)
  //model_input->data.f[120][5] = input;

  // int input = interpreter->inputs()[0];
  // float* input_data_ptr = interpreter->typed_input_tensor<float>(input);
  for (int i = 0; i < 120; ++i) {
      for (int j = 0; j < 5; j++) {
          // *(input_data_ptr) = input_mat[i][j];
          model_input->data.f[i*5+j] = input_mat[i][j];
          // input_data_ptr++;
      }
  }

  // Run inference
  TfLiteStatus invoke_status = interpreter->Invoke();
  if (invoke_status != kTfLiteOk) {
    error_reporter->Report("Invoke failed on input: %f\n", input_mat);
  }

  // Read predicted y value from output buffer (tensor)
  float output = model_output->data.f[0];

  // Print value
  Serial.println(output);

  Serial.print("Time for inference (seconds): ");
  Serial.println((micros() - start_timestamp)/1000000);
  delay(100000);
}